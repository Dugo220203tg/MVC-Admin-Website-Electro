<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Web Admin of TungDuong</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <meta content="" name="keywords">
    <meta content="" name="description">

    <!-- Favicon -->
    <link href="@Url.Content("~/Hinh/logo.png")" type="image/x-icon" rel="icon">

    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Roboto:wght@500;700&display=swap" rel="stylesheet">

    <!-- Icon Font Stylesheet -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Libraries Stylesheet -->
    <link href="@Url.Content("~/lib/owlcarousel/assets/owl.carousel.min.css")" rel="stylesheet">
    <link href="@Url.Content("~/lib/tempusdominus/css/tempusdominus-bootstrap-4.min.css")" rel="stylesheet" />

    <!-- Customized Bootstrap Stylesheet -->
    <link href="@Url.Content("~/css/bootstrap.min.css")" rel="stylesheet">

    <!-- Template Stylesheet -->
    <link href="@Url.Content("~/css/style.css")" rel="stylesheet">
    <link href="@Url.Content("~/css/mycss.css")" rel="stylesheet">

</head>
<body>
    <!-- Header và các phần tử khác của trang web -->
    <!-- Nội dung của view sẽ được chèn vào đây -->
    @RenderBody()
    <!-- Footer và các phần tử khác của trang web -->
    <!-- External Scripts -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="@Url.Content("~/lib/chart/chart.min.js")"></script>
    <script src="@Url.Content("~/lib/easing/easing.min.js")"></script>
    <script src="@Url.Content("~/lib/waypoints/waypoints.min.js")"></script>
    <script src="@Url.Content("~/lib/owlcarousel/owl.carousel.min.js")"></script>
    <script src="@Url.Content("~/lib/tempusdominus/js/moment.min.js")"></script>
    <script src="@Url.Content("~/lib/tempusdominus/js/moment-timezone.min.js")"></script>
    <script src="@Url.Content("~/lib/tempusdominus/js/tempusdominus-bootstrap-4.min.js")"></script>

    <!-- Template Javascript -->
    <script src="@Url.Content("~/js/main.js")"></script>
    <script src="@Url.Content("~/js/myjs.js")"></script>
    <script>
        function attachEventListeners() {
            console.log('Attempting to attach event listeners');

            // Select all dropdowns that start with 'selectTrangThai-'
            var statusSelects = document.querySelectorAll('select[id^="selectTrangThai-"]');
            console.log('Found ' + statusSelects.length + ' select elements');

            // Loop through each select element and attach the 'change' event listener
            statusSelects.forEach(function (select) {
                console.log('Attaching listener to', select.id);

                select.addEventListener('change', function () {
                    console.log('Change event triggered for', this.id);

                    // Extract the order ID (maHD) from the select element's ID
                    var maHD = this.id.split('-')[1];
                    confirmChangeTrangThai(maHD, this);
                });
            });
        }

        // Function to handle the confirmation and AJAX request for changing status
        function confirmChangeTrangThai(maHD, selectElement) {
            console.log('confirmChangeTrangThai called for order:', maHD);

            // Get the newly selected status value
            var newMaTrangThai = selectElement.value;

            // Get the original status value (in case we need to revert)
            var originalValue = selectElement.getAttribute('data-original-value');

            // Confirm with the user before proceeding
            if (confirm("Bạn có chắc chắn muốn thay đổi trạng thái của đơn hàng này không?")) {
                console.log('User confirmed status change. Sending AJAX request...');

                // Make the AJAX POST request
                $.ajax({
                    url: 'https://localhost:7109/api/HoaDon/UpdateTrangThai',  // Correct API endpoint
                    type: 'POST',
                    data: JSON.stringify({
                        maHD: maHD,                // Pass the order ID (maHD)
                        maTrangThai: newMaTrangThai // Pass the new status value (maTrangThai)
                    }),
                    contentType: 'application/json',
                    success: function (response) {
                        console.log('AJAX request successful. Status updated.');
                        alert('Cập nhật trạng thái thành công!');

                        // Update the original value to the new value
                        selectElement.setAttribute('data-original-value', newMaTrangThai);
                    },
                    error: function (xhr) {
                        console.error('AJAX request failed:', xhr.statusText);

                        // Show error and revert the select element to the original value
                        alert('Cập nhật trạng thái thất bại: ' + xhr.responseText);
                        selectElement.value = originalValue;
                    }
                });
            } else {
                console.log('User cancelled status change. Reverting select value.');

                // If the user cancels, revert to the original status value
                selectElement.value = originalValue;
            }
        }

        // Call the function to attach event listeners when the page loads
        document.addEventListener('DOMContentLoaded', attachEventListeners);

    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Set selected value for select (MaNCC and MaLoai)
            function setSelectedValue(selectId, inputId) {
                const selectElement = document.getElementById(selectId);
                const inputValueElement = document.getElementById(inputId);

                if (selectElement && inputValueElement) {
                    const inputValue = inputValueElement.value;

                    if (inputValue) {
                        for (let i = 0; i < selectElement.options.length; i++) {
                            if (selectElement.options[i].value === inputValue) {
                                selectElement.selectedIndex = i;
                                break;
                            }
                        }
                    }
                }
            }

            setSelectedValue('selectNCC', 'inputValueNCC');
            setSelectedValue('selectLoaiSp', 'inputValueLoaiSp');

            // Pass value from select to input
            const selectLoaiSp = document.getElementById('selectLoaiSp');
            const selectNCC = document.getElementById('selectNCC');

            if (selectLoaiSp) {
                selectLoaiSp.addEventListener('change', function () {
                    const inputValue = document.getElementById('inputValueLoaiSp');
                    if (inputValue) inputValue.value = this.value || '';
                });
            }

            if (selectNCC) {
                selectNCC.addEventListener('change', function () {
                    const inputValue = document.getElementById('inputValueNCC');
                    if (inputValue) inputValue.value = this.value || '';
                });
            }

            // IMAGE HANDLING IN EDIT HANG HOA
            window.previewImage = function (input) {
                if (input.files && input.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const previewItem = input.closest('.image-input-group').querySelector('.image-preview-item');
                        previewItem.innerHTML = '';

                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.className = 'preview-image';
                        img.alt = 'Preview';

                        const p = document.createElement('p');
                        p.className = 'image-name';
                        p.textContent = input.files[0].name;

                        previewItem.appendChild(img);
                        previewItem.appendChild(p);

                        updateExistingImageNames();
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            }

            window.addNewImageInput = function () {
                const container = document.getElementById('imageInputsContainer');
                if (container) {
                    const newIndex = container.children.length;

                    const newGroup = document.createElement('div');
                    newGroup.className = 'image-input-group mb-3';
                    newGroup.innerHTML = `
                                    <div class="image-preview-item"></div>
                                    <div class="input-group input-group-img">
                                        <input type="file" class="form-control bg-dark image-input" name="ImageFiles" onchange="previewImage(this)" data-index="${newIndex}">
                                        <button type="button" class="btn btn-danger remove-image" onclick="removeImageInput(this)">Xóa</button>
                                    </div>`;

                    container.appendChild(newGroup);
                }
            }

            window.removeImageInput = function (button) {
                const group = button.closest('.image-input-group');
                if (group) {
                    group.remove();
                    updateExistingImageNames();
                }
            }

            function updateExistingImageNames() {
                const imageNames = Array.from(document.querySelectorAll('.image-name')).map(el => el.textContent);
                const hinhInput = document.getElementById('hinhInput');
                if (hinhInput) {
                    hinhInput.value = imageNames.join(',');
                }
            }

            // Initialize image inputs
            const imageInputsContainer = document.getElementById('imageInputsContainer');
            if (imageInputsContainer && imageInputsContainer.children.length === 0) {
                addNewImageInput();
            }
            updateExistingImageNames();

            // DATE HANDLING IN CREATE HANG HOA
            if (typeof $ !== 'undefined' && $.fn.datepicker) {
                $('.datepicker').datepicker({
                    format: 'dd/mm/yyyy',
                    autoclose: true,
                    todayHighlight: true
                });
            }

            if (typeof $ !== 'undefined' && $.fn.datetimepicker) {
                $(".date").datetimepicker({
                    format: 'YYYY-MM-DD',
                    icons: {
                        time: "fa fa-clock-o",
                        date: "fa fa-calendar",
                        up: "fa fa-arrow-up",
                        down: "fa fa-arrow-down"
                    },
                    showTodayButton: true,
                    useCurrent: false
                }).find('input:first').on("blur", function () {
                    const date = parseDate($(this).val());
                    $(this).val(isValidDate(date) ? date : moment().format('YYYY-MM-DD'));
                });
            }

            function isValidDate(value) {
                return !isNaN(Date.parse(value));
            }

            function parseDate(value) {
                const m = value.match(/^(\d{1,2})(\/|-)?(\d{1,2})(\/|-)?(\d{4})$/);
                return m ? `${m[5]}-${("00" + m[3]).slice(-2)}-${("00" + m[1]).slice(-2)}` : value;
            }

            // Confirm delete
            const deleteForm = document.getElementById('delete-form');
            if (deleteForm) {
                deleteForm.addEventListener('submit', function (event) {
                    if (!confirm('Bạn có chắc muốn xóa?')) {
                        event.preventDefault();
                    }
                });
            }

            // Active link highlight
            const currentUrl = window.location.href;
            document.querySelectorAll('a[href]').forEach(function (link) {
                if (currentUrl.endsWith(link.getAttribute('href'))) {
                    link.classList.add('active');
                }
            });

            // Add event listener to the form for image name collection
            const form = document.querySelector('form');
            if (form) {
                form.addEventListener('submit', function (event) {
                    updateExistingImageNames();
                });
            }
        });
    </script>
    <!-- Section for additional scripts -->
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
